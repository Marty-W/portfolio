---
import type { MarkdownHeading } from "astro"
type Props = {
  headings: MarkdownHeading[]
}
type HeadingWithSubheadings = MarkdownHeading & {
  subheadings: MarkdownHeading[]
}
const { headings } = Astro.props
const grouppedHeadings = headings.reduce((array, heading) => {
  if (heading.depth === 2) {
    array.push({ ...heading, subheadings: [] })
  } else if (heading.depth === 3) {
    array.at(-1)?.subheadings.push(heading)
  }
  return array
}, [] as HeadingWithSubheadings[])
---

<nav
  id="table-of-contents text-sm"
  aria-label="Table Of Contents"
  class="select-none"
>
  <ol>
    {
      grouppedHeadings.map((h) => (
        <li>
          <a href={`#${h.slug}`}>{h.text}</a>
          {h.subheadings.length > 0 && (
            <ol>
              {h.subheadings.map((sub) => (
                <li>
                  <a href={`#${sub.slug}`}>{sub.text}</a>
                </li>
              ))}
            </ol>
          )}
        </li>
      ))
    }
  </ol>
</nav>

<script is:inline>
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault()

      document.querySelector(this.getAttribute("href")).scrollIntoView({
        behavior: "smooth",
      })
    })
  })
</script>

<style>
  a {
    background-position-y: -0%;
    background-image: linear-gradient(180deg, transparent 50%, black 50%);
    transition: all 0.1s ease;
    background-size: 2px;
    background-size: auto 190%;
    padding: 3px 0;
    text-decoration: none;
    color: inherit;
  }

  a:hover {
    background-position-y: 100%;
    color: white;
    transition: all 0.1s ease;
  }
</style>
